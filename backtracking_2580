#include <iostream>
#include<stdio.h>
#include <stack> //include stack library
using namespace std;


int S[9][9] = {0};
stack<int> x;
stack<int> y;
stack<int> oldCor;
int sizeStack;


bool is_correct(int, int);
void appendSu();
void sudocu();

int main() {
    
    for(int i = 0; i < 9; i++){
        for(int j = 0; j < 9; j++){
            scanf("%d", &S[i][j]);
        }
    }
    
    appendSu();
    
    sudocu();
    printf("\n");
    for(int i = 0; i < 9; i++){
        for(int j = 0; j < 9; j++){
            printf("%d ", S[i][j]);
        }
        printf("\n");
    }
    
    return 0;
}

bool is_correct(int x, int y){
    int tmp, xtmp, ytmp, cnt = 0;
    for(int i = 0; i < 9; i++){//가로, 세로줄에 있나 확인
        
        tmp = S[x][y];
        if(S[x][i] == tmp && i != y)
            return false;
        if(S[i][y] == tmp && i != x)
            return false;
        //if(cnt > 1)//각 줄을 한 번씩 탐색하므로 기본적으로 2회는 존재함
            
    }
    
    xtmp = (x) / 3 * 3;
    ytmp = (y) / 3 * 3;
    
  
    
    //printf("%d %d", xtmp, ytmp);
    for(int i = 0; i < 3; i++){//사각형 안에 있나 확인
        for(int j = 0; j < 3; j++){
            if(S[xtmp + i][ytmp + j] == tmp && xtmp + i != x && ytmp + j != y){
                return false;
            } 
        }
    }
    return true;
}

void appendSu(){
    for(int i = 0; i < 9; i++){
        for(int j = 0; j < 9; j++){
            if(S[i][j] == 0){
                x.push(i);
                y.push(j);
            }
        }
    }
    sizeStack = x.size();
}

void sudocu(){
    int xcor, ycor;
    while(!x.empty()){//빈칸이 다 체워진 경우
        
        xcor = x.top();
        ycor = y.top();
        x.pop();
        y.pop();
        
        
        S[xcor][ycor]++;
        while(!is_correct(xcor, ycor) && S[xcor][ycor] < 10){
            S[xcor][ycor]++;//check value 1 ~ 9
        }
        oldCor.push(xcor*10 + ycor);
        if(sizeStack <= oldCor.size())//모든 칸을 처리해서 처리된 칸의 크기가 원래 빈칸의 크기와 같을 때 실행을 
            return;
        if(S[xcor][ycor] == 10){
            S[xcor][ycor] = 0;
            x.push(oldCor.top() / 10);
            y.push(oldCor.top() % 10);
            oldCor.pop();
            x.push(oldCor.top() / 10);
            y.push(oldCor.top() % 10);
            oldCor.pop();
        }
        
            
    }
    
    return;
    
}
